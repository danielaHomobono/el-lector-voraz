extends layout

block scripts
  script(src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js", defer)

block content
  h1 Reporte Financiero
  
  div(style="max-width: 1200px; margin: 0 auto; padding: 1rem;")
    // Filter section
    div(style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 1.5rem; margin-bottom: 2rem;")
      h3(style="margin-top: 0; margin-bottom: 1rem; color: var(--primary);") Filtrar Reportes
      div(style="display: flex; flex-wrap: wrap; gap: 1rem;")
        div(style="flex: 1; min-width: 200px;")
          label(style="display: block; margin-bottom: 0.5rem; font-weight: 500;") Desde
          input#dateFrom(type="date" style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 8px; height: 42px; box-sizing: border-box;")
        
        div(style="flex: 1; min-width: 200px;")
          label(style="display: block; margin-bottom: 0.5rem; font-weight: 500;") Hasta
          input#dateTo(type="date" style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 8px; height: 42px; box-sizing: border-box;")
        
        div(style="flex: 1; min-width: 200px;")
          label(style="display: block; margin-bottom: 0.5rem; font-weight: 500;") Tipo de Producto
          select#productTypeFilter(style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 8px; height: 42px; box-sizing: border-box;")
            option(value="") Todos
            option(value="book") Libros
            option(value="cafe") Cafetería
      
      div(style="margin-top: 1rem; display: flex; gap: 1rem;")
        button#applyFilter(style="padding: 0.75rem 1.5rem; background-color: var(--secondary); color: white; border: none; border-radius: 8px; cursor: pointer;") Aplicar Filtros
        button#resetFilter(style="padding: 0.75rem 1.5rem; background-color: var(--text-light); color: white; border: none; border-radius: 8px; cursor: pointer;") Limpiar Filtros
        button#exportCSV(style="padding: 0.75rem 1.5rem; background-color: var(--accent); color: var(--primary); font-weight: bold; border: none; border-radius: 8px; cursor: pointer; margin-left: auto;") Exportar a CSV
    
    if error
      div(style="background-color: #ffebee; color: #c62828; padding: 1rem; border-radius: 8px; margin-bottom: 2rem;")
        p= error
    
    if report
      // Summary cards
      div(style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem;")
        div(style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 1.5rem; text-align: center;")
          div(style="font-size: 0.9rem; color: var(--text-light);") Ventas Totales
          div(style="font-size: 1.8rem; font-weight: 600; color: var(--primary); margin: 0.5rem 0;") #{report.summary.totalSales}
          
        div(style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 1.5rem; text-align: center;")
          div(style="font-size: 0.9rem; color: var(--text-light);") Ingresos Totales
          div(style="font-size: 1.8rem; font-weight: 600; color: var(--primary); margin: 0.5rem 0;") $#{report.summary.totalRevenue.toFixed(2)}
          
        div(style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 1.5rem; text-align: center;")
          div(style="font-size: 0.9rem; color: var(--text-light);") Ticket Promedio
          - const avgTicket = report.summary.totalSales > 0 ? report.summary.totalRevenue / report.summary.totalSales : 0
          div(style="font-size: 1.8rem; font-weight: 600; color: var(--primary); margin: 0.5rem 0;") $#{avgTicket.toFixed(2)}
          
        div(style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 1.5rem; text-align: center;")
          div(style="font-size: 0.9rem; color: var(--text-light);") Productos Vendidos
          - const totalProducts = Object.values(report.summary.productTypes || {}).reduce((sum, val) => sum + val, 0)
          div(style="font-size: 1.8rem; font-weight: 600; color: var(--primary); margin: 0.5rem 0;") #{totalProducts}
      
      // Charts section
      div(style="display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 2rem; margin-bottom: 2rem;")
        // Revenue chart
        div(style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 1.5rem;")
          h3(style="margin-top: 0; margin-bottom: 1rem; color: var(--primary);") Ingresos por Día
          div(style="height: 300px;")
            canvas#revenueChart
        
        // Product type chart
        div(style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 1.5rem;")
          h3(style="margin-top: 0; margin-bottom: 1rem; color: var(--primary);") Ventas por Tipo de Producto
          div(style="height: 300px;")
            canvas#productTypeChart
      
      // Daily report table
      div(style="background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); padding: 1.5rem; margin-bottom: 2rem; overflow-x: auto;")
        h3(style="margin-top: 0; margin-bottom: 1rem; color: var(--primary);") Reporte Diario
        if report.report && report.report.length > 0
          table#reportTable(style="width: 100%; min-width: 800px; border-collapse: collapse;")
            thead(style="background-color: var(--primary); color: var(--highlight);")
              tr
                th(style="padding: 1rem; text-align: left; border-bottom: 1px solid rgba(0,0,0,0.05);") Fecha
                th(style="padding: 1rem; text-align: left; border-bottom: 1px solid rgba(0,0,0,0.05);") Ventas
                th(style="padding: 1rem; text-align: left; border-bottom: 1px solid rgba(0,0,0,0.05);") Ingresos
                th(style="padding: 1rem; text-align: left; border-bottom: 1px solid rgba(0,0,0,0.05);") Canales
                th(style="padding: 1rem; text-align: left; border-bottom: 1px solid rgba(0,0,0,0.05);") Tipos de Producto
            tbody
              each day in report.report
                tr(style="border-bottom: 1px solid rgba(0,0,0,0.05);" data-date=day.date)
                  td(style="padding: 1rem;")= day.date
                  td(style="padding: 1rem;")= day.totalSales
                  td(style="padding: 1rem;")= `$${day.totalRevenue.toFixed(2)}`
                  td(style="padding: 1rem;")
                    ul(style="list-style: none; padding: 0; margin: 0;")
                      each quantity, channel in day.salesByChannel
                        li(style="margin-bottom: 0.25rem;")= `${channel}: ${quantity}`
                  td(style="padding: 1rem;")
                    ul(style="list-style: none; padding: 0; margin: 0;")
                      each quantity, type in day.salesByType
                        li(style="margin-bottom: 0.25rem;")= `${type === 'book' ? 'Libros' : 'Cafetería'}: ${quantity}`
        else
          p(style="text-align: center; padding: 2rem; color: var(--text-light);") No hay datos de ventas disponibles.
    else
      p(style="text-align: center; padding: 2rem; color: var(--text-light); background: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);") No hay reporte disponible.

  script.
    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      // Set up filter functionality
      document.getElementById('applyFilter').addEventListener('click', filterReport);
      document.getElementById('resetFilter').addEventListener('click', resetFilters);
      document.getElementById('exportCSV').addEventListener('click', exportToCSV);
      
      // Initialize charts
      initCharts();
    });
    
    // Initialize charts
    function initCharts() {
      const report = !{JSON.stringify(report || {})};
      
      if (!report || !report.report || report.report.length === 0) {
        return;
      }
      
      // Prepare data for revenue chart
      const dates = [];
      const revenues = [];
      const salesCounts = [];
      
      // Sort report by date
      report.report.sort((a, b) => new Date(a.date) - new Date(b.date));
      
      // Get the last 30 days of data
      const recentData = report.report.slice(-30);
      
      recentData.forEach(day => {
        dates.push(day.date);
        revenues.push(day.totalRevenue);
        salesCounts.push(day.totalSales);
      });
      
      // Create revenue chart
      const revenueCtx = document.getElementById('revenueChart').getContext('2d');
      new Chart(revenueCtx, {
        type: 'line',
        data: {
          labels: dates,
          datasets: [
            {
              label: 'Ingresos ($)',
              data: revenues,
              borderColor: 'rgba(140, 68, 42, 1)',
              backgroundColor: 'rgba(140, 68, 42, 0.1)',
              borderWidth: 2,
              fill: true,
              tension: 0.4,
              yAxisID: 'y'
            },
            {
              label: 'Ventas',
              data: salesCounts,
              borderColor: 'rgba(242, 152, 73, 1)',
              backgroundColor: 'rgba(242, 152, 73, 0.1)',
              borderWidth: 2,
              fill: true,
              tension: 0.4,
              yAxisID: 'y1'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              position: 'left',
              title: {
                display: true,
                text: 'Ingresos ($)'
              },
              ticks: {
                callback: function(value) {
                  return '$' + value;
                }
              }
            },
            y1: {
              beginAtZero: true,
              position: 'right',
              title: {
                display: true,
                text: 'Ventas'
              },
              grid: {
                drawOnChartArea: false
              }
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.datasetIndex === 0) {
                    label += '$' + context.raw.toFixed(2);
                  } else {
                    label += context.raw;
                  }
                  return label;
                }
              }
            }
          }
        }
      });
      
      // Prepare data for product type chart
      const productTypes = {};
      report.report.forEach(day => {
        Object.entries(day.salesByType).forEach(([type, count]) => {
          if (!productTypes[type]) {
            productTypes[type] = 0;
          }
          productTypes[type] += count;
        });
      });
      
      const typeLabels = Object.keys(productTypes).map(type => type === 'book' ? 'Libros' : 'Cafetería');
      const typeCounts = Object.values(productTypes);
      
      // Create product type chart
      const typeCtx = document.getElementById('productTypeChart').getContext('2d');
      new Chart(typeCtx, {
        type: 'pie',
        data: {
          labels: typeLabels,
          datasets: [{
            data: typeCounts,
            backgroundColor: [
              'rgba(140, 68, 42, 0.7)',
              'rgba(242, 152, 73, 0.7)'
            ],
            borderColor: [
              'rgba(140, 68, 42, 1)',
              'rgba(242, 152, 73, 1)'
            ],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw;
                  const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
    }
    
    // Filter report based on criteria
    function filterReport() {
      const dateFrom = document.getElementById('dateFrom').value;
      const dateTo = document.getElementById('dateTo').value;
      const productType = document.getElementById('productTypeFilter').value;
      
      const rows = document.querySelectorAll('#reportTable tbody tr');
      
      rows.forEach(row => {
        let show = true;
        const dateCell = row.getAttribute('data-date');
        const typeCell = row.querySelector('td:nth-child(5)').textContent.toLowerCase();
        
        if (dateFrom && dateCell < dateFrom) {
          show = false;
        }
        
        if (dateTo && dateCell > dateTo) {
          show = false;
        }
        
        if (productType && !typeCell.includes(productType === 'book' ? 'libros' : 'cafetería')) {
          show = false;
        }
        
        row.style.display = show ? '' : 'none';
      });
    }
    
    // Reset all filters
    function resetFilters() {
      document.getElementById('dateFrom').value = '';
      document.getElementById('dateTo').value = '';
      document.getElementById('productTypeFilter').value = '';
      
      const rows = document.querySelectorAll('#reportTable tbody tr');
      rows.forEach(row => {
        row.style.display = '';
      });
    }
    
    // Export report to CSV
    function exportToCSV() {
      const report = !{JSON.stringify(report || {})};
      
      if (!report || !report.report || report.report.length === 0) {
        alert('No hay datos para exportar');
        return;
      }
      
      // Create CSV header
      let csv = 'Fecha,Ventas,Ingresos,Canales,Tipos de Producto\n';
      
      // Add data rows
      report.report.forEach(day => {
        const channels = Object.entries(day.salesByChannel)
          .map(([channel, count]) => `${channel}: ${count}`)
          .join('; ');
        
        const types = Object.entries(day.salesByType)
          .map(([type, count]) => `${type === 'book' ? 'Libros' : 'Cafetería'}: ${count}`)
          .join('; ');
        
        csv += `${day.date},${day.totalSales},$${day.totalRevenue.toFixed(2)},"${channels}","${types}"\n`;
      });
      
      // Create download link
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `reporte_financiero_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }