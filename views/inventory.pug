extends layout

block content
  h1 Inventario
  
  if user && user.role === 'admin'
    .add-book-form
      h2 Agregar Nuevo Libro
      form#addBookForm(action="/api/products" method="POST")
        .form-group
          label(for="title") Título:
          input#title(type="text" name="title" required)
        
        .form-group
          label(for="author") Autor:
          input#author(type="text" name="author" required)
        
        .form-group
          label(for="isbn") ISBN:
          input#isbn(type="text" name="isbn" required)
        
        .form-group
          label(for="price") Precio:
          input#price(type="number" name="price" step="0.01" required)
        
        .form-group
          label(for="stock") Stock:
          input#stock(type="number" name="stock" required)
        
        .form-group
          label(for="category") Categoría:
          input#category(type="text" name="category" required)
        
        button(type="submit") Agregar Libro

      script.
        document.getElementById('addBookForm').addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const formData = {
            title: document.getElementById('title').value,
            author: document.getElementById('author').value,
            isbn: document.getElementById('isbn').value,
            price: parseFloat(document.getElementById('price').value),
            stock: parseInt(document.getElementById('stock').value),
            category: document.getElementById('category').value,
            type: 'book'
          };

          try {
            const response = await fetch('/api/products', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            });

            if (response.ok) {
              alert('Libro agregado exitosamente');
              document.getElementById('addBookForm').reset(); // Limpiar el formulario
              window.location.reload(); // Recargar la página para ver el nuevo libro
            } else {
              const data = await response.json();
              alert('Error: ' + (data.error || 'Error al agregar el libro'));
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Error al agregar el libro');
          }
        });

    .add-cafe-form
      h2 Agregar Nuevo Café
      form#addCafeForm(action="/api/cafe" method="POST")
        .form-group
          label(for="cafeName") Nombre:
          input#cafeName(type="text" name="name" required)

        .form-group
          label(for="cafeCategory") Categoría:
          select#cafeCategory(name="category" required)
            option(value="Bebida") Bebida
            option(value="Comida") Comida
            option(value="Postre") Postre

        .form-group
          label(for="cafePrice") Precio:
          input#cafePrice(type="number" name="price" step="0.01" required)

        .form-group
          label(for="cafeStock") Stock:
          input#cafeStock(type="number" name="stock" required)

        .form-group
          label(for="cafeDescription") Descripción:
          input#cafeDescription(type="text" name="description")

        button(type="submit") Agregar Café

      script.
        document.getElementById('addCafeForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const formData = {
            name: document.getElementById('cafeName').value,
            category: document.getElementById('cafeCategory').value,
            price: parseFloat(document.getElementById('cafePrice').value),
            stock: parseInt(document.getElementById('cafeStock').value),
            description: document.getElementById('cafeDescription').value,
            isAvailable: true
          };

          try {
            const response = await fetch('/api/cafe', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-voraz-key': API_KEY
              },
              body: JSON.stringify(formData)
            });

            if (response.ok) {
              alert('Café agregado exitosamente');
              document.getElementById('addCafeForm').reset();
              window.location.reload();
            } else {
              const data = await response.json();
              alert('Error: ' + (data.error || 'Error al agregar el café'));
            }
          } catch (error) {
            alert('Error al agregar el café');
          }
        });

  .inventory-container
    .inventory-section
      h2 Libros
      p Debug: #{products ? products.length : 'No hay productos'} libros encontrados
      if products && products.length > 0
        table(border='1')
          tr
            th Título
            th Autor
            th ISBN
            th Precio
            th Stock
            th Acciones
          each product in products
            tr
              td= product.title
              td= product.author
              td= product.isbn
              td= product.price
              td= product.stock
              td
                button(onclick=`editBook('${product.isbn}')`) Editar
                button(onclick=`deleteBook('${product.isbn}')`) Eliminar
      else
        p No hay libros en inventario.

    .inventory-section
      h2 Cafés
      if cafes && cafes.length > 0
        table(border='1')
          tr
            th Nombre
            th Categoría
            th Precio
            th Stock
            th Acciones
          each cafe in cafes
            tr
              td= cafe.name
              td= cafe.category
              td= cafe.price
              td= cafe.stock
              td
                button(onclick=`editCafe('${cafe.id}')`) Editar
                button(onclick=`deleteCafe('${cafe.id}')`) Eliminar
      else
        p No hay cafés en inventario.

  style.
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: #f7f7fa;
      color: #222;
      margin: 0;
      padding: 0;
    }
    h1 {
      text-align: center;
      margin-top: 2rem;
      color: #2c3e50;
    }
    .add-book-form, .add-cafe-form {
      max-width: 600px;
      min-width: 300px;
      width: 100vw;
      margin-left: auto;
      margin-right: auto;
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(44,62,80,0.08);
      padding: 2rem;
      margin-top: 2rem;
      margin-bottom: 1rem;
      box-sizing: border-box;
    }
    .add-book-form h2, .add-cafe-form h2 {
      margin-top: 0;
      color: #bfa76a;
      text-align: center;
      font-size: 2rem;
      letter-spacing: 1px;
    }
    .form-group {
      margin-bottom: 1rem;
    }
    label {
      display: block;
      margin-bottom: 0.3rem;
      font-weight: 500;
    }
    input, select {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 1rem;
    }
    .add-book-form button,
    .add-cafe-form button {
      background: #bfa76a !important;
      color: #fff !important;
      width: 100%;
      font-size: 1.1rem;
      margin-top: 1rem;
      display: block;
      border: none;
      box-sizing: border-box;
    }
    button:hover {
      background: #a68b4a;
    }
    .inventory-container {
      display: flex;
      gap: 2rem;
      margin: 2rem 0;
      justify-content: center;
    }
    .inventory-section {
      flex: 1;
      min-width: 0;
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(44,62,80,0.08);
      padding: 2rem;
    }
    .inventory-section table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 1rem;
      background: #fafbfc;
      border-radius: 8px;
      overflow: hidden;
    }
    .inventory-section th,
    .inventory-section td {
      padding: 0.7rem;
      text-align: left;
      border-bottom: 1px solid #eaeaea;
    }
    .inventory-section th {
      background: #eaf1fb;
      color: #bfa76a;
      font-weight: 600;
    }
    .inventory-section h2 {
      margin-bottom: 1rem;
      color: #2c3e50;
      text-align: center;
    }
    .add-book-form, .add-cafe-form {
      margin-bottom: 2rem;
    }
    main {
      margin-bottom: 6rem;
    }
    @media (max-width: 900px) {
      .inventory-container {
        flex-direction: column;
        gap: 1rem;
      }
      .inventory-section {
        padding: 1rem;
      }
    }

  script.
    // La API key se pasa desde el backend como variable global
    const API_KEY = !{JSON.stringify(apiKey)};

    // --------- LIBROS ---------
    async function deleteBook(isbn) {
      if (!confirm('¿Seguro que quieres eliminar este libro?')) return;
      try {
        const response = await fetch(`/api/products/${isbn}`, {
          method: 'DELETE',
          headers: {
            'x-voraz-key': API_KEY
          }
        });
        if (response.ok) {
          alert('Libro eliminado exitosamente');
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo eliminar el libro'));
        }
      } catch (error) {
        alert('Error al eliminar el libro');
      }
    }

    async function editBook(isbn) {
      const nuevoTitulo = prompt('Nuevo título:');
      const nuevoAutor = prompt('Nuevo autor:');
      const nuevoIsbn = prompt('Nuevo ISBN:', isbn);
      const nuevoPrecio = prompt('Nuevo precio:');
      const nuevoStock = prompt('Nuevo stock:');
      const nuevaCategoria = prompt('Nueva categoría:');
      if (
        nuevoTitulo === null ||
        nuevoAutor === null ||
        nuevoIsbn === null ||
        nuevoPrecio === null ||
        nuevoStock === null ||
        nuevaCategoria === null
      ) return;
      try {
        const response = await fetch(`/api/products/${isbn}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'x-voraz-key': API_KEY
          },
          body: JSON.stringify({
            title: nuevoTitulo,
            author: nuevoAutor,
            isbn: nuevoIsbn,
            price: parseFloat(nuevoPrecio),
            stock: parseInt(nuevoStock),
            category: nuevaCategoria
          })
        });
        if (response.ok) {
          alert('Libro actualizado exitosamente');
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo actualizar el libro'));
        }
      } catch (error) {
        alert('Error al actualizar el libro');
      }
    }

    // --------- CAFÉS ---------
    async function deleteCafe(id) {
      if (!confirm('¿Seguro que quieres eliminar este café?')) return;
      try {
        const response = await fetch(`/api/cafe/${id}`, {
          method: 'DELETE',
          headers: {
            'x-voraz-key': API_KEY
          }
        });
        if (response.ok) {
          alert('Café eliminado exitosamente');
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo eliminar el café'));
        }
      } catch (error) {
        alert('Error al eliminar el café');
      }
    }

    async function editCafe(id) {
      const nuevoNombre = prompt('Nuevo nombre:');
      const nuevaCategoria = prompt('Nueva categoría (Bebida, Comida, Postre):');
      const nuevoPrecio = prompt('Nuevo precio:');
      const nuevoStock = prompt('Nuevo stock:');
      if (
        nuevoNombre === null ||
        nuevaCategoria === null ||
        nuevoPrecio === null ||
        nuevoStock === null
      ) return;
      try {
        const response = await fetch(`/api/cafe/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'x-voraz-key': API_KEY
          },
          body: JSON.stringify({
            name: nuevoNombre,
            category: nuevaCategoria,
            price: parseFloat(nuevoPrecio),
            stock: parseInt(nuevoStock)
          })
        });
        if (response.ok) {
          alert('Café actualizado exitosamente');
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo actualizar el café'));
        }
      } catch (error) {
        alert('Error al actualizar el café');
      }
    }
