extends layout

block content
  h1 Gestión de Usuarios
  
  if user && user.role === 'admin'
    .add-user-form
      h2 Agregar Nuevo Usuario
      form#addUserForm(action="/api/users" method="POST")
        .form-group
          label(for="userEmail") Email:
          input#userEmail(type="email" name="email" required)

        .form-group
          label(for="userPassword") Contraseña:
          input#userPassword(type="password" name="password" required)

        .form-group
          label(for="userRole") Rol:
          select#userRole(name="role" required)
            option(value="admin") Admin
            option(value="staff") Staff
            option(value="client") Client

        button(type="submit") Agregar Usuario

      script.
        document.getElementById('addUserForm').addEventListener('submit', async (e) => {
          e.preventDefault();

          const formData = {
            email: document.getElementById('userEmail').value,
            password: document.getElementById('userPassword').value,
            role: document.getElementById('userRole').value
          };

          try {
            const response = await fetch('/api/users', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'x-voraz-key': API_KEY
              },
              body: JSON.stringify(formData)
            });

            if (response.ok) {
              alert('Usuario agregado exitosamente');
              document.getElementById('addUserForm').reset();
              window.location.reload();
            } else {
              const data = await response.json();
              alert('Error: ' + (data.error || 'Error al agregar el usuario'));
            }
          } catch (error) {
            alert('Error al agregar el usuario');
          }
        });

  .users-container
    h2 Usuarios Registrados
    if users && users.length > 0
      table(border='1')
        tr
          th Email
          th Rol
          th Estado
          th Último Login
          th Acciones
        each user in users
          tr
            td= user.email
            td= user.role
            td= user.isActive ? 'Activo' : 'Inactivo'
            td= user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : 'Nunca'
            td
              button(onclick=`editUser('${user.id}')`) Editar
              button(onclick=`deleteUser('${user.id}')`) Eliminar
    else
      p No hay usuarios registrados.

  style.
    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background: #f7f7fa;
      color: #222;
      margin: 0;
      padding: 0;
    }
    h1 {
      text-align: center;
      margin-top: 2rem;
      color: #2c3e50;
    }
    .add-user-form {
      max-width: 600px;
      min-width: 300px;
      width: 100vw;
      margin-left: auto;
      margin-right: auto;
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(44,62,80,0.08);
      padding: 2rem;
      margin-top: 2rem;
      margin-bottom: 2rem;
      box-sizing: border-box;
    }
    .add-user-form h2 {
      margin-top: 0;
      color: #bfa76a;
      text-align: center;
      font-size: 2rem;
      letter-spacing: 1px;
    }
    .form-group {
      margin-bottom: 1rem;
    }
    label {
      display: block;
      margin-bottom: 0.3rem;
      font-weight: 500;
    }
    input, select {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 1rem;
      box-sizing: border-box;
    }
    .add-user-form button {
      background: #bfa76a !important;
      color: #fff !important;
      width: 100%;
      font-size: 1.1rem;
      margin-top: 1rem;
      display: block;
      border: none;
      box-sizing: border-box;
      padding: 0.6rem 1.2rem;
      border-radius: 5px;
      cursor: pointer;
      font-weight: 600;
      letter-spacing: 0.5px;
    }
    .add-user-form button:hover {
      background: #a68b4a !important;
    }
    .users-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    .users-container h2 {
      text-align: center;
      color: #2c3e50;
      margin-bottom: 2rem;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(44,62,80,0.08);
      overflow: hidden;
    }
    th, td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid #eaeaea;
    }
    th {
      background: #eaf1fb;
      color: #bfa76a;
      font-weight: 600;
    }
    button {
      background: #bfa76a;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
      cursor: pointer;
      margin-right: 0.5rem;
      transition: background 0.2s;
      font-weight: 600;
    }
    button:hover {
      background: #a68b4a;
    }
    main {
      margin-bottom: 6rem;
    }
    @media (max-width: 768px) {
      .add-user-form {
        margin: 1rem;
        padding: 1rem;
      }
      table {
        font-size: 0.9rem;
      }
      th, td {
        padding: 0.5rem;
      }
    }

  script.
    // La API key se pasa desde el backend como variable global
    const API_KEY = !{JSON.stringify(apiKey)};

    // --------- USUARIOS ---------
    async function deleteUser(id) {
      if (!confirm('¿Seguro que quieres eliminar este usuario?')) return;
      try {
        const response = await fetch(`/api/users/${id}`, {
          method: 'DELETE',
          headers: {
            'x-voraz-key': API_KEY
          }
        });
        if (response.ok) {
          alert('Usuario eliminado exitosamente');
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo eliminar el usuario'));
        }
      } catch (error) {
        alert('Error al eliminar el usuario');
      }
    }

    async function editUser(id) {
      const nuevoEmail = prompt('Nuevo email:');
      const nuevoPassword = prompt('Nueva contraseña (dejar vacío para no cambiar):');
      const nuevoRol = prompt('Nuevo rol (admin, staff, client):');
      
      if (nuevoEmail === null || nuevoRol === null) return;
      
      const userData = {
        email: nuevoEmail,
        role: nuevoRol
      };
      
      if (nuevoPassword && nuevoPassword.trim() !== '') {
        userData.password = nuevoPassword;
      }
      
      try {
        const response = await fetch(`/api/users/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'x-voraz-key': API_KEY
          },
          body: JSON.stringify(userData)
        });
        if (response.ok) {
          alert('Usuario actualizado exitosamente');
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo actualizar el usuario'));
        }
      } catch (error) {
        alert('Error al actualizar el usuario');
      }
    }
