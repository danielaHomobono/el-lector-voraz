extends layout

block scripts
  link(rel="stylesheet", href="/css/inventory.css")
  link(rel="stylesheet", href="/css/stock.css")
  script(src="/socket.io/socket.io.js")
  style.
    #stock-toast {
      display: none;
      position: fixed;
      top: 20px;
      right: 20px;
      background:rgb(39, 98, 41);
      color: #fff;
      padding: 12px 24px;
      border-radius: 8px;
      font-size: 1.1rem;
      z-index: 9999;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
      transition: opacity 0.3s;
    }

block content
  h1 Inventario de Cafetería
  
  if user && user.role === 'admin'
    button#toggleFormBtn.toggle-form-btn Agregar nuevo item
    
    .add-book-form#addStockFormContainer(style="display: none;")
      h2 Agregar Nuevo Item
      form#addStockForm
        .form-group
          label(for="name") Nombre:
          input#name(type="text" name="name" required)
        
        .form-group
          label(for="type") Tipo:
          select#type(name="type" required)
            option(value="") Seleccionar tipo
            option(value="food") Comida
            option(value="beverage") Bebida
            option(value="ingredient") Ingrediente
            option(value="supply") Suministro
        
        .form-group
          label(for="quantity") Cantidad:
          input#quantity(type="number" name="quantity" required min="0")
        
        .form-group
          label(for="unit") Unidad:
          input#unit(type="text" name="unit" required value="unidades")
        
        .form-group
          label(for="minStock") Stock Mínimo:
          input#minStock(type="number" name="minStock" required min="0" value="5")
        
        .form-group
          label(for="supplier") Proveedor:
          input#supplier(type="text" name="supplier")
        
        .form-group
          label(for="notes") Notas:
          textarea#notes(name="notes" rows="3")
        
        button(type="submit") Agregar Item

  .inventory-container
    .inventory-section
      h2 Items en Inventario
      
      .search-box
        input#searchInput(type="text" placeholder="Buscar por nombre o tipo...")
        button#searchButton(type="button") Buscar
      
      if stockItems && stockItems.length > 0
        table#stockTable
          thead
            tr
              th(onclick="sortTable(0)") Nombre ↕
              th(onclick="sortTable(1)") Tipo ↕
              th(onclick="sortTable(2)") Cantidad ↕
              th(onclick="sortTable(3)") Unidad ↕
              th(onclick="sortTable(4)") Stock Mínimo ↕
              th(onclick="sortTable(5)") Proveedor ↕
              th Acciones
          tbody
            each item in stockItems
              tr(class=item.quantity <= item.minStock ? 'low-stock-row' : '')
                td= item.name
                td= item.type === 'food' ? 'Comida' : (item.type === 'beverage' ? 'Bebida' : (item.type === 'ingredient' ? 'Ingrediente' : 'Suministro'))
                td= item.quantity
                td= item.unit
                td= item.minStock
                td= item.supplier || 'N/A'
                td.actions
                  button.edit-btn(onclick=`editStock('${item._id}')`) Editar
                  button.delete-btn(onclick=`deleteStock('${item._id}')`) Eliminar
      else
        .empty-state
          p No hay items en inventario.
          if user && user.role === 'admin'
            p Utiliza el formulario para agregar nuevos items.

  #editModal.modal
    .modal-content
      span.close-btn &times;
      h3 Editar Item
      form#editStockForm
        input#editItemId(type="hidden")
        .form-group
          label(for="editName") Nombre:
          input#editName(type="text")
        
        .form-group
          label(for="editType") Tipo:
          select#editType
            option(value="food") Comida
            option(value="beverage") Bebida
            option(value="ingredient") Ingrediente
            option(value="supply") Suministro
        
        .form-group
          label(for="editQuantity") Cantidad:
          input#editQuantity(type="number" min="0")
        
        .form-group
          label(for="editUnit") Unidad:
          input#editUnit(type="text")
        
        .form-group
          label(for="editMinStock") Stock Mínimo:
          input#editMinStock(type="number" min="0")
        
        .form-group
          label(for="editSupplier") Proveedor:
          input#editSupplier(type="text")
        
        .form-group
          label(for="editNotes") Notas:
          textarea#editNotes(rows="3")
        
        button(type="submit") Guardar Cambios

  #stock-toast ¡Stock actualizado!

  script.
    // Conexión a Socket.IO para actualizaciones en tiempo real
    const socket = io();
    socket.on('updateStock', data => {
      showStockToast();
      updateStockTable();
    });
    // La API key se pasa desde el backend como variable global
    const API_KEY = !{JSON.stringify(apiKey || '')};
    
    // Sort table by column
    function sortTable(columnIndex) {
      const table = document.getElementById('stockTable');
      if (!table) return;
      
      const tbody = table.querySelector('tbody');
      if (!tbody) return;
      
      const rows = Array.from(tbody.querySelectorAll('tr'));
      
      // Sort the rows
      rows.sort((a, b) => {
        let aValue = a.cells[columnIndex].textContent.trim();
        let bValue = b.cells[columnIndex].textContent.trim();
        
        // Handle numeric columns
        if (columnIndex === 2 || columnIndex === 4) {
          return parseInt(aValue) - parseInt(bValue);
        }
        
        // Default string comparison
        return aValue.localeCompare(bValue);
      });
      
      // Clear the table
      while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
      }
      
      // Add sorted rows back to the table
      rows.forEach(row => tbody.appendChild(row));
    }
    
    // Sort by name on page load
    window.addEventListener('DOMContentLoaded', function() {
      if (document.getElementById('stockTable')) {
        sortTable(0);
      }
      
      // Toggle form visibility
      const toggleBtn = document.getElementById('toggleFormBtn');
      if (toggleBtn) {
        toggleBtn.addEventListener('click', function() {
          const formContainer = document.getElementById('addStockFormContainer');
          const isHidden = formContainer.style.display === 'none';
          
          formContainer.style.display = isHidden ? 'block' : 'none';
          this.textContent = isHidden ? 'Ocultar formulario' : 'Agregar nuevo item';
        });
      }
      
      // Add event listeners for search
      const searchBtn = document.getElementById('searchButton');
      const searchInput = document.getElementById('searchInput');
      
      if (searchBtn) {
        searchBtn.addEventListener('click', searchStock);
      }
      
      if (searchInput) {
        searchInput.addEventListener('keyup', function(event) {
          if (event.key === 'Enter') {
            searchStock();
          }
        });
      }
      
      // Add stock form submission
      const addStockForm = document.getElementById('addStockForm');
      if (addStockForm) {
        addStockForm.addEventListener('submit', addStockItem);
      }
      
      // Edit stock form submission
      const editStockForm = document.getElementById('editStockForm');
      if (editStockForm) {
        editStockForm.addEventListener('submit', updateStockItem);
      }
      
      // Modal close button
      const closeBtn = document.querySelector('.close-btn');
      if (closeBtn) {
        closeBtn.onclick = function() {
          document.getElementById('editModal').style.display = "none";
        }
      }
      
      // Close modal when clicking outside
      window.onclick = function(event) {
        const modal = document.getElementById('editModal');
        if (event.target == modal) {
          modal.style.display = "none";
        }
      }
    });
    
    // Search functionality
    function searchStock() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const table = document.getElementById('stockTable');
      if (!table) return;
      
      const rows = table.getElementsByTagName('tr');
      
      // Skip header row (index 0)
      for (let i = 1; i < rows.length; i++) {
        const name = rows[i].getElementsByTagName('td')[0].textContent.toLowerCase();
        const type = rows[i].getElementsByTagName('td')[1].textContent.toLowerCase();
        
        if (name.includes(searchTerm) || type.includes(searchTerm)) {
          rows[i].style.display = '';
        } else {
          rows[i].style.display = 'none';
        }
      }
    }
    
    // Add stock item
    async function addStockItem(e) {
      e.preventDefault();
      
      const formData = {
        name: document.getElementById('name').value,
        type: document.getElementById('type').value,
        quantity: parseInt(document.getElementById('quantity').value),
        unit: document.getElementById('unit').value,
        minStock: parseInt(document.getElementById('minStock').value),
        supplier: document.getElementById('supplier').value,
        notes: document.getElementById('notes').value
      };

      try {
        const response = await fetch('/api/cafe-stock', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-voraz-key': API_KEY
          },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          alert('Item agregado exitosamente');
          document.getElementById('addStockForm').reset();
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'Error al agregar el item'));
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al agregar el item');
      }
    }
    
    // Edit stock function - opens modal with item data
    async function editStock(id) {
      try {
        const response = await fetch(`/api/cafe-stock/${id}`, {
          headers: {
            'x-voraz-key': API_KEY
          }
        });
        
        if (!response.ok) {
          throw new Error('Error al obtener datos del item');
        }
        
        const item = await response.json();
        
        // Fill the edit form
        document.getElementById('editItemId').value = item._id;
        document.getElementById('editName').value = item.name;
        document.getElementById('editType').value = item.type;
        document.getElementById('editQuantity').value = item.quantity;
        document.getElementById('editUnit').value = item.unit;
        document.getElementById('editMinStock').value = item.minStock;
        document.getElementById('editSupplier').value = item.supplier || '';
        document.getElementById('editNotes').value = item.notes || '';
        
        // Show the modal
        document.getElementById('editModal').style.display = "block";
      } catch (error) {
        alert('Error: ' + error.message);
      }
    }
    
    // Update stock item
    async function updateStockItem(e) {
      e.preventDefault();
      
      const id = document.getElementById('editItemId').value;
      
      const formData = {
        name: document.getElementById('editName').value,
        type: document.getElementById('editType').value,
        quantity: parseInt(document.getElementById('editQuantity').value),
        unit: document.getElementById('editUnit').value,
        minStock: parseInt(document.getElementById('editMinStock').value),
        supplier: document.getElementById('editSupplier').value,
        notes: document.getElementById('editNotes').value
      };
      
      try {
        const response = await fetch(`/api/cafe-stock/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'x-voraz-key': API_KEY
          },
          body: JSON.stringify(formData)
        });
        
        if (response.ok) {
          alert('Item actualizado exitosamente');
          document.getElementById('editModal').style.display = "none";
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo actualizar el item'));
        }
      } catch (error) {
        alert('Error al actualizar el item');
      }
    }
    
    // Delete stock function
    async function deleteStock(id) {
      if (!confirm('¿Seguro que quieres eliminar este item?')) return;
      
      try {
        const response = await fetch(`/api/cafe-stock/${id}`, {
          method: 'DELETE',
          headers: {
            'x-voraz-key': API_KEY
          }
        });
        
        if (response.ok) {
          alert('Item eliminado exitosamente');
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo eliminar el item'));
        }
      } catch (error) {
        alert('Error al eliminar el item');
      }
    }

    function showStockToast() {
      const toast = document.getElementById('stock-toast');
      toast.style.display = 'block';
      toast.style.opacity = 1;
      setTimeout(() => {
        toast.style.opacity = 0;
        setTimeout(() => { toast.style.display = 'none'; }, 400);
      }, 5000);
    }

    async function updateStockTable() {
      const res = await fetch('/api/stock');
      const stockItems = await res.json();
      const tbody = document.querySelector('#stockTable tbody');
      if (!tbody) return;
      tbody.innerHTML = '';
      stockItems.forEach(item => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${item.name}</td>
          <td>${item.type}</td>
          <td>${item.quantity}</td>
          <td>${item.unit}</td>
          <td>${item.minStock}</td>
          <td>${item.supplier || 'N/A'}</td>
          <td class="actions">
            <button class="edit-btn" onclick="editStock('${item._id}')">Editar</button>
            <button class="delete-btn" onclick="deleteStock('${item._id}')">Eliminar</button>
          </td>
        `;
        tbody.appendChild(tr);
      });
    }