extends layout

block scripts
  link(rel="stylesheet", href="/css/inventory.css")
  script(src="/socket.io/socket.io.js")
  style.
    #stock-toast {
      display: none;
      position: fixed;
      top: 20px;
      right: 20px;
      background: #4caf50;
      color: #fff;
      padding: 12px 24px;
      border-radius: 8px;
      font-size: 1.1rem;
      z-index: 9999;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
      transition: opacity 0.3s;
    }
    #stock-toast .close-toast {
      margin-left: 16px;
      color: #fff;
      font-weight: bold;
      cursor: pointer;
      font-size: 1.2em;
      border: none;
      background: transparent;
    }

block content
  h1 Inventario de Libros
  
  if user && (user.role === 'admin' || user.role === 'staff')
    button#toggleFormBtn.toggle-form-btn Agregar nuevo libro
    
    .add-book-form#addBookFormContainer(style="display: none;")
      h2 Agregar Nuevo Libro
      form#addBookForm(action="/api/products" method="POST")
        .form-group
          label(for="title") Título:
          input#title(type="text" name="title" required)
        
        .form-group
          label(for="author") Autor:
          input#author(type="text" name="author" required)
        
        .form-group
          label(for="isbn") ISBN:
          input#isbn(type="text" name="isbn" required)
        
        .form-group
          label(for="price") Precio:
          input#price(type="number" name="price" step="0.01" required)
        
        .form-group
          label(for="stock") Stock:
          input#stock(type="number" name="stock" required)
        
        .form-group
          label(for="category") Categoría:
          select#category(name="category" required)
            option(value="") Seleccionar categoría
            option(value="Ficción") Ficción
            option(value="Novela") Novela
            option(value="Biografía") Biografía
        
        button(type="submit") Agregar Libro

  .inventory-container
    .inventory-section
      h2 Libros en Inventario
      
      .search-box
        input#searchInput(type="text" placeholder="Buscar por título, autor o ISBN...")
        button#searchButton(type="button") Buscar
      
      if products && products.length > 0
        table#booksTable
          thead
            tr
              th(onclick="sortTable(0)") Título ↕
              th(onclick="sortTable(1)") Autor ↕
              th(onclick="sortTable(2)") ISBN ↕
              th(onclick="sortTable(3)") Categoría ↕
              th(onclick="sortTable(4)") Precio ↕
              th(onclick="sortTable(5)") Stock ↕
              th Acciones
          tbody
            each product in products
              tr
                td= product.title
                td= product.author
                td= product.isbn
                td= product.category
                td $#{product.price}
                td= product.stock
                td.actions
                  button.edit-btn(onclick=`editBook('${product.isbn}')`) Editar
                  button.delete-btn(onclick=`deleteBook('${product.isbn}')`) Eliminar
      else
        .empty-state
          p No hay libros en inventario.
          if user && (user.role === 'admin' || user.role === 'staff')
            p Utiliza el formulario para agregar nuevos libros.

  #editModal.modal
    .modal-content
      span.close-btn &times;
      h3 Editar Libro
      form#editBookForm
        input#editIsbnOriginal(type="hidden")
        .form-group
          label(for="editTitle") Título:
          input#editTitle(type="text")
        
        .form-group
          label(for="editAuthor") Autor:
          input#editAuthor(type="text")
        
        .form-group
          label(for="editIsbn") ISBN:
          input#editIsbn(type="text")
        
        .form-group
          label(for="editPrice") Precio:
          input#editPrice(type="number" step="0.01")
        
        .form-group
          label(for="editStock") Stock:
          input#editStock(type="number")
        
        .form-group
          label(for="editCategory") Categoría:
          select#editCategory
            option(value="Ficción") Ficción
            option(value="Novela") Novela
            option(value="Biografía") Biografía
        
        button(type="submit") Guardar Cambios

  #stock-toast
    | ¡Stock actualizado!
    button.close-toast(type="button" onclick="closeStockToast()") ×

  script.
    // Conexión a Socket.IO para actualizaciones en tiempo real
    const socket = io();
    socket.on('updateStock', data => {
      showStockToast();
      updateBooksTable();
    });
    // La API key se pasa desde el backend como variable global
    const API_KEY = !{JSON.stringify(apiKey)};
    
    // Sort table by column
    function sortTable(columnIndex) {
      const table = document.getElementById('booksTable');
      const tbody = table.querySelector('tbody');
      const rows = Array.from(tbody.querySelectorAll('tr'));
      
      // Sort the rows
      rows.sort((a, b) => {
        let aValue = a.cells[columnIndex].textContent.trim();
        let bValue = b.cells[columnIndex].textContent.trim();
        
        // Handle price column (remove $ sign)
        if (columnIndex === 4) {
          aValue = parseFloat(aValue.replace('$', ''));
          bValue = parseFloat(bValue.replace('$', ''));
          return aValue - bValue;
        }
        
        // Handle stock column (convert to number)
        if (columnIndex === 5) {
          return parseInt(aValue) - parseInt(bValue);
        }
        
        // Default string comparison
        return aValue.localeCompare(bValue);
      });
      
      // Clear the table
      while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
      }
      
      // Add sorted rows back to the table
      rows.forEach(row => tbody.appendChild(row));
    }
    
    // Sort by title on page load
    window.addEventListener('DOMContentLoaded', function() {
      sortTable(0);
    });
    
    // Toggle form visibility
    document.getElementById('toggleFormBtn').addEventListener('click', function() {
      const formContainer = document.getElementById('addBookFormContainer');
      const isHidden = formContainer.style.display === 'none';
      
      formContainer.style.display = isHidden ? 'block' : 'none';
      this.textContent = isHidden ? 'Ocultar formulario' : 'Agregar nuevo libro';
    });
    
    // Search functionality
    function searchBooks() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const table = document.getElementById('booksTable');
      const rows = table.getElementsByTagName('tr');
      
      // Skip header row (index 0)
      for (let i = 1; i < rows.length; i++) {
        const title = rows[i].getElementsByTagName('td')[0].textContent.toLowerCase();
        const author = rows[i].getElementsByTagName('td')[1].textContent.toLowerCase();
        const isbn = rows[i].getElementsByTagName('td')[2].textContent.toLowerCase();
        
        if (title.includes(searchTerm) || author.includes(searchTerm) || isbn.includes(searchTerm)) {
          rows[i].style.display = '';
        } else {
          rows[i].style.display = 'none';
        }
      }
    }
    
    // Add event listeners for search
    document.getElementById('searchButton').addEventListener('click', searchBooks);
    document.getElementById('searchInput').addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        searchBooks();
      }
    });
    
    // Add book form submission
    document.getElementById('addBookForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = {
        title: document.getElementById('title').value,
        author: document.getElementById('author').value,
        isbn: document.getElementById('isbn').value,
        price: parseFloat(document.getElementById('price').value),
        stock: parseInt(document.getElementById('stock').value),
        category: document.getElementById('category').value,
        type: 'book'
      };

      try {
        const response = await fetch('/api/products', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          document.getElementById('addBookForm').reset();
          showStockToast();
          updateBooksTable();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'Error al agregar el libro'));
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al agregar el libro');
      }
    });
    
    // Get modal elements
    const modal = document.getElementById('editModal');
    const closeBtn = document.querySelector('.close-btn');
    
    // Close modal when clicking the X
    closeBtn.onclick = function() {
      modal.style.display = "none";
    }
    
    // Close modal when clicking outside
    window.onclick = function(event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    }
    
    // Edit book function - opens modal with book data
    function editBook(isbn) {
      // Find the book row
      const rows = document.querySelectorAll('table tbody tr');
      let bookRow = null;
      
      for (const row of rows) {
        const isbnCell = row.querySelector('td:nth-child(3)');
        if (isbnCell && isbnCell.textContent === isbn) {
          bookRow = row;
          break;
        }
      }
      
      if (!bookRow) {
        alert('No se pudo encontrar el libro');
        return;
      }
      
      // Get book data from the row
      const cells = bookRow.querySelectorAll('td');
      const title = cells[0].textContent;
      const author = cells[1].textContent;
      const category = cells[3].textContent;
      const price = cells[4].textContent.replace('$', '');
      const stock = cells[5].textContent;
      
      // Fill the edit form
      document.getElementById('editIsbnOriginal').value = isbn;
      document.getElementById('editTitle').value = title;
      document.getElementById('editAuthor').value = author;
      document.getElementById('editIsbn').value = isbn;
      document.getElementById('editPrice').value = price;
      document.getElementById('editStock').value = stock;
      
      // Set the category dropdown
      const categorySelect = document.getElementById('editCategory');
      for (let i = 0; i < categorySelect.options.length; i++) {
        if (categorySelect.options[i].value === category) {
          categorySelect.selectedIndex = i;
          break;
        }
      }
      
      // Show the modal
      modal.style.display = "block";
    }
    
    // Handle edit form submission
    document.getElementById('editBookForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const originalIsbn = document.getElementById('editIsbnOriginal').value;
      
      // Get only the fields that have been modified
      const formData = {};
      
      // Always include type
      formData.type = 'book';
      
      // Check each field and only include if it has a value
      const title = document.getElementById('editTitle').value;
      if (title) formData.title = title;
      
      const author = document.getElementById('editAuthor').value;
      if (author) formData.author = author;
      
      const isbn = document.getElementById('editIsbn').value;
      if (isbn) formData.isbn = isbn;
      
      const price = document.getElementById('editPrice').value;
      if (price) formData.price = parseFloat(price);
      
      const stock = document.getElementById('editStock').value;
      if (stock) formData.stock = parseInt(stock);
      
      const category = document.getElementById('editCategory').value;
      if (category) formData.category = category;
      
      // The API requires all fields, so we need to get the original data for any missing fields
      const rows = document.querySelectorAll('table tbody tr');
      let bookRow = null;
      
      for (const row of rows) {
        const isbnCell = row.querySelector('td:nth-child(3)');
        if (isbnCell && isbnCell.textContent === originalIsbn) {
          bookRow = row;
          break;
        }
      }
      
      if (bookRow) {
        const cells = bookRow.querySelectorAll('td');
        
        if (!formData.title) formData.title = cells[0].textContent;
        if (!formData.author) formData.author = cells[1].textContent;
        if (!formData.isbn) formData.isbn = cells[2].textContent;
        if (!formData.category) formData.category = cells[3].textContent;
        if (!formData.price) formData.price = parseFloat(cells[4].textContent.replace('$', ''));
        if (!formData.stock) formData.stock = parseInt(cells[5].textContent);
      }
      
      try {
        const response = await fetch(`/api/products/${originalIsbn}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'x-voraz-key': API_KEY
          },
          body: JSON.stringify(formData)
        });
        
        if (response.ok) {
          modal.style.display = "none";
          showStockToast();
          updateBooksTable();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo actualizar el libro'));
        }
      } catch (error) {
        alert('Error al actualizar el libro');
      }
    });
    
    // Delete book function
    async function deleteBook(isbn) {
      if (!confirm('¿Seguro que quieres eliminar este libro?')) return;
      
      try {
        const response = await fetch(`/api/products/${isbn}`, {
          method: 'DELETE',
          headers: {
            'x-voraz-key': API_KEY
          }
        });
        
        if (response.ok) {
          showStockToast();
          updateBooksTable();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo eliminar el libro'));
        }
      } catch (error) {
        alert('Error al eliminar el libro');
      }
    }

    function showStockToast() {
      const toast = document.getElementById('stock-toast');
      toast.style.display = 'block';
      toast.style.opacity = 1;
    }

    function closeStockToast() {
      const toast = document.getElementById('stock-toast');
      toast.style.opacity = 0;
      setTimeout(() => { toast.style.display = 'none'; }, 400);
    }

    async function updateBooksTable() {
      const res = await fetch('/api/products');
      const products = await res.json();
      const tbody = document.querySelector('#booksTable tbody');
      if (!tbody) return;
      tbody.innerHTML = '';
      products.forEach(product => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${product.title}</td>
          <td>${product.author}</td>
          <td>${product.isbn}</td>
          <td>${product.category}</td>
          <td>$${product.price}</td>
          <td>${product.stock}</td>
          <td class="actions">
            <button class="edit-btn" onclick="editBook('${product.isbn}')">Editar</button>
            <button class="delete-btn" onclick="deleteBook('${product.isbn}')">Eliminar</button>
          </td>
        `;
        tbody.appendChild(tr);
      });
    }