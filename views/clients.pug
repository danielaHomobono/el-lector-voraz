extends layout

block scripts
  link(rel="stylesheet", href="/css/clients.css")

block content
  h1 Gestión de Clientes
  
  if user && user.role === 'admin'
    button#toggleFormBtn.toggle-form-btn Agregar nuevo cliente
    
    .add-client-form#addClientFormContainer
      h2 Agregar Nuevo Cliente
      form#addClientForm(action="/api/clients" method="POST")
        .form-group
          label(for="clientName") Nombre:
          input#clientName(type="text" name="name" required)

        .form-group
          label(for="clientEmail") Email:
          input#clientEmail(type="email" name="email" required)

        .form-group
          label(for="clientPhone") Teléfono:
          input#clientPhone(type="tel" name="phone")

        .form-group
          label(for="clientPoints") Puntos:
          input#clientPoints(type="number" name="points" value="0" min="0")

        button(type="submit") Agregar Cliente

  .inventory-container
    .inventory-section
      h2 Clientes Registrados
      
      .search-box
        input#searchInput(type="text" placeholder="Buscar por nombre o email...")
        button#searchButton(type="button") Buscar
      
      if clients && clients.length > 0
        table#clientsTable
          thead
            tr
              th(onclick="sortTable(0)") Nombre ↕
              th(onclick="sortTable(1)") Email ↕
              th(onclick="sortTable(2)") Teléfono ↕
              th(onclick="sortTable(3)") Puntos ↕
              th(onclick="sortTable(4)") Fecha de Registro ↕
              th Acciones
          tbody
            each client in clients
              tr
                td= client.name
                td= client.email
                td= client.phone || 'No especificado'
                td= client.points || 0
                td= client.createdAt ? new Date(client.createdAt).toLocaleDateString() : 'N/A'
                td.actions
                  button.edit-btn(onclick=`editClient('${client.id}')`) Editar
                  button.delete-btn(onclick=`deleteClient('${client.id}')`) Eliminar
      else
        .empty-state
          p No hay clientes registrados.
          if user && user.role === 'admin'
            p Utiliza el formulario para agregar nuevos clientes.

  #editModal.modal
    .modal-content
      span.close-btn &times;
      h3 Editar Cliente
      form#editClientForm
        input#editClientId(type="hidden")
        .form-group
          label(for="editName") Nombre:
          input#editName(type="text")
        
        .form-group
          label(for="editEmail") Email:
          input#editEmail(type="email")
        
        .form-group
          label(for="editPhone") Teléfono:
          input#editPhone(type="tel")
        
        .form-group
          label(for="editPoints") Puntos:
          input#editPoints(type="number" min="0")
        
        button(type="submit") Guardar Cambios

  script.
    // La API key se pasa desde el backend como variable global
    const API_KEY = !{JSON.stringify(apiKey)};
    
    // Sort table by column
    function sortTable(columnIndex) {
      const table = document.getElementById('clientsTable');
      const tbody = table.querySelector('tbody');
      const rows = Array.from(tbody.querySelectorAll('tr'));
      
      // Sort the rows
      rows.sort((a, b) => {
        let aValue = a.cells[columnIndex].textContent.trim();
        let bValue = b.cells[columnIndex].textContent.trim();
        
        // Handle points column (convert to number)
        if (columnIndex === 3) {
          return parseInt(aValue) - parseInt(bValue);
        }
        
        // Handle date column
        if (columnIndex === 4) {
          // If it's not a date, sort alphabetically
          if (aValue === 'N/A' || bValue === 'N/A') {
            return aValue.localeCompare(bValue);
          }
          // Otherwise, convert to date and sort
          return new Date(aValue) - new Date(bValue);
        }
        
        // Default string comparison
        return aValue.localeCompare(bValue);
      });
      
      // Clear the table
      while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
      }
      
      // Add sorted rows back to the table
      rows.forEach(row => tbody.appendChild(row));
    }
    
    // Sort by name on page load
    window.addEventListener('DOMContentLoaded', function() {
      sortTable(0);
    });
    
    // Toggle form visibility
    document.getElementById('toggleFormBtn').addEventListener('click', function() {
      const formContainer = document.getElementById('addClientFormContainer');
      const isHidden = formContainer.style.display === 'none';
      
      formContainer.style.display = isHidden ? 'block' : 'none';
      this.textContent = isHidden ? 'Ocultar formulario' : 'Agregar nuevo cliente';
    });
    
    // Search functionality
    function searchClients() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const table = document.getElementById('clientsTable');
      const rows = table.getElementsByTagName('tr');
      
      // Skip header row (index 0)
      for (let i = 1; i < rows.length; i++) {
        const name = rows[i].getElementsByTagName('td')[0].textContent.toLowerCase();
        const email = rows[i].getElementsByTagName('td')[1].textContent.toLowerCase();
        
        if (name.includes(searchTerm) || email.includes(searchTerm)) {
          rows[i].style.display = '';
        } else {
          rows[i].style.display = 'none';
        }
      }
    }
    
    // Add event listeners for search
    document.getElementById('searchButton').addEventListener('click', searchClients);
    document.getElementById('searchInput').addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        searchClients();
      }
    });
    
    // Add client form submission
    document.getElementById('addClientForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = {
        name: document.getElementById('clientName').value,
        email: document.getElementById('clientEmail').value,
        phone: document.getElementById('clientPhone').value || null,
        points: parseInt(document.getElementById('clientPoints').value) || 0
      };

      try {
        const response = await fetch('/api/clients', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-voraz-key': API_KEY
          },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          alert('Cliente agregado exitosamente');
          document.getElementById('addClientForm').reset();
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'Error al agregar el cliente'));
        }
      } catch (error) {
        alert('Error al agregar el cliente');
      }
    });
    
    // Get modal elements
    const modal = document.getElementById('editModal');
    const closeBtn = document.querySelector('.close-btn');
    
    // Close modal when clicking the X
    closeBtn.onclick = function() {
      modal.style.display = "none";
    }
    
    // Close modal when clicking outside
    window.onclick = function(event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    }
    
    // Edit client function - opens modal with client data
    function editClient(id) {
      // Find the client row
      const rows = document.querySelectorAll('table tbody tr');
      let clientRow = null;
      
      for (const row of rows) {
        const editBtn = row.querySelector('.edit-btn');
        if (editBtn && editBtn.getAttribute('onclick').includes(id)) {
          clientRow = row;
          break;
        }
      }
      
      if (!clientRow) {
        alert('No se pudo encontrar el cliente');
        return;
      }
      
      // Get client data from the row
      const cells = clientRow.querySelectorAll('td');
      const name = cells[0].textContent;
      const email = cells[1].textContent;
      const phone = cells[2].textContent === 'No especificado' ? '' : cells[2].textContent;
      const points = cells[3].textContent;
      
      // Fill the edit form
      document.getElementById('editClientId').value = id;
      document.getElementById('editName').value = name;
      document.getElementById('editEmail').value = email;
      document.getElementById('editPhone').value = phone;
      document.getElementById('editPoints').value = points;
      
      // Show the modal
      modal.style.display = "block";
    }
    
    // Handle edit form submission
    document.getElementById('editClientForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const id = document.getElementById('editClientId').value;
      
      const formData = {
        name: document.getElementById('editName').value,
        email: document.getElementById('editEmail').value,
        phone: document.getElementById('editPhone').value || null,
        points: parseInt(document.getElementById('editPoints').value) || 0
      };
      
      try {
        const response = await fetch(`/api/clients/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'x-voraz-key': API_KEY
          },
          body: JSON.stringify(formData)
        });
        
        if (response.ok) {
          alert('Cliente actualizado exitosamente');
          modal.style.display = "none";
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo actualizar el cliente'));
        }
      } catch (error) {
        alert('Error al actualizar el cliente');
      }
    });
    
    // Delete client function
    async function deleteClient(id) {
      if (!confirm('¿Seguro que quieres eliminar este cliente?')) return;
      
      try {
        const response = await fetch(`/api/clients/${id}`, {
          method: 'DELETE',
          headers: {
            'x-voraz-key': API_KEY
          }
        });
        
        if (response.ok) {
          alert('Cliente eliminado exitosamente');
          window.location.reload();
        } else {
          const data = await response.json();
          alert('Error: ' + (data.error || 'No se pudo eliminar el cliente'));
        }
      } catch (error) {
        alert('Error al eliminar el cliente');
      }
    }